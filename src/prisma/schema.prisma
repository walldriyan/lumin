// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ==============================================================================
// Models
// ==============================================================================

// Stores company profile information.
model CompanyProfile {
  id                String @id @default(cuid())
  name              String @unique
  address           String?
  phone             String?
  email             String?
  website           String?
  taxId             String?
  logoUrl           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdByUserId   String?
  updatedByUserId   String?

  // Relations
  users                     User[]
  parties                   Party[]
  products                  Product[]
  purchaseBills             PurchaseBill[]
  saleRecords               SaleRecord[]
  stockAdjustmentLogs       StockAdjustmentLog[]
  financialTransactions     FinancialTransaction[]
  cashRegisterShifts        CashRegisterShift[]
  discountSets              DiscountSet[]
  productDiscountConfigurations ProductDiscountConfiguration[]
}

// Manages user accounts, roles, and permissions.
model User {
  id           String  @id @default(cuid())
  username     String  @unique
  email        String? @unique
  passwordHash String
  isActive     Boolean @default(true)
  
  // Relations
  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  companyId String
  company   CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  // Auditing
  createdByUserId String?
  updatedByUserId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relational Fields
  createdParties         Party[]          @relation("CreatedBy")
  updatedParties         Party[]          @relation("UpdatedBy")
  createdProducts        Product[]        @relation("CreatedBy")
  updatedProducts        Product[]        @relation("UpdatedBy")
  createdPurchaseBills   PurchaseBill[]   @relation("CreatedBy")
  recordedPayments       PurchasePayment[] @relation("RecordedBy")
  createdSaleRecords     SaleRecord[]     @relation("CreatedBy")
  stockAdjustments       StockAdjustmentLog[]
  financialTransactions  FinancialTransaction[]
  createdRoles           Role[]           @relation("CreatedBy")
  updatedRoles           Role[]           @relation("UpdatedBy")
  createdUsers           User[]           @relation("CreatedBy")
  updatedUsers           User[]           @relation("UpdatedBy")
  cashRegisterShifts     CashRegisterShift[]
  createdDiscountSets    DiscountSet[]    @relation("CreatedBy")
  updatedDiscountSets    DiscountSet[]    @relation("UpdatedBy")
  createdAppConfigs      AppConfig[]      @relation("UpdatedBy")
  
  // Self-relation for createdBy and updatedBy
  createdBy              User?            @relation("CreatedBy", fields: [createdByUserId], references: [id])
  updatedBy              User?            @relation("UpdatedBy", fields: [updatedByUserId], references: [id])
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  
  // Relations
  users       User[]
  permissions RolePermission[]

  // Auditing
  createdByUserId String?
  updatedByUserId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  createdBy User? @relation("CreatedBy", fields: [createdByUserId], references: [id])
  updatedBy User? @relation("UpdatedBy", fields: [updatedByUserId], references: [id])
}

model Permission {
  id          String   @id @default(cuid())
  action      String   // e.g., 'create', 'read', 'update', 'delete'
  subject     String   // e.g., 'Product', 'Sale', 'User'
  description String?
  
  // Relations
  roles       RolePermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([action, subject])
}

model RolePermission {
  roleId       String
  permissionId String
  
  // Relations
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

// Represents customers and suppliers.
model Party {
  id      String  @id @default(cuid())
  name    String
  phone   String?
  email   String?
  address String?
  type    String  // "CUSTOMER" or "SUPPLIER"
  isActive Boolean @default(true)
  
  // Relations
  companyId String
  company   CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  // Auditing
  createdByUserId String?
  updatedByUserId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  createdBy User? @relation("CreatedBy", fields: [createdByUserId], references: [id])
  updatedBy User? @relation("UpdatedBy", fields: [updatedByUserId], references: [id])

  // Relational Fields
  purchaseBills PurchaseBill[]
  saleRecords   SaleRecord[]

  @@index([companyId])
}

// Manages product inventory and details.
model Product {
  id           String  @id @default(cuid())
  name         String
  code         String? @unique
  category     String?
  barcode      String? @unique
  units        Json    // { "baseUnit": "pcs", "derivedUnits": [{"name": "box", "conversionFactor": 12, "threshold": 12}] }
  sellingPrice Float
  defaultQuantity Float @default(1)
  isActive     Boolean @default(true)
  isService    Boolean @default(false)
  productSpecificTaxRate Float?
  description  String?
  imageUrl     String?

  // Relations
  companyId String
  company   CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  // Auditing
  createdByUserId String?
  updatedByUserId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  createdBy User? @relation("CreatedBy", fields: [createdByUserId], references: [id])
  updatedBy User? @relation("UpdatedBy", fields: [updatedByUserId], references: [id])

  // Relational Fields
  batches             ProductBatch[]
  purchaseBillItems   PurchaseBillItem[]
  stockAdjustmentLogs StockAdjustmentLog[]
  productDiscountConfigurations ProductDiscountConfiguration[]

  @@index([name])
  @@index([companyId])
}

model ProductBatch {
  id                 String @id @default(cuid())
  productId          String
  batchNumber        String?
  quantity           Float
  costPrice          Float
  sellingPrice       Float
  expiryDate         DateTime?
  createdAt          DateTime @default(now())
  
  // Relations
  product            Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  purchaseBillItemId String? @unique
  purchaseBillItem   PurchaseBillItem? @relation(fields: [purchaseBillItemId], references: [id])
}

// Records incoming stock from suppliers.
model PurchaseBill {
  id                 String   @id @default(cuid())
  supplierId         String
  supplierBillNumber String?
  purchaseDate       DateTime
  notes              String?
  totalAmount        Float
  amountPaid         Float    @default(0)
  paymentStatus      String   // e.g., 'DRAFT', 'COMPLETED', 'PAID', 'PARTIALLY_PAID'

  // Relations
  companyId String
  company   CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  supplier  Party          @relation(fields: [supplierId], references: [id])
  items     PurchaseBillItem[]
  payments  PurchasePayment[]

  // Auditing
  createdByUserId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  createdBy User? @relation("CreatedBy", fields: [createdByUserId], references: [id])

  @@index([companyId])
}

model PurchaseBillItem {
  id                    String  @id @default(cuid())
  purchaseBillId        String
  productId             String
  productNameAtPurchase String
  quantityPurchased     Float
  costPriceAtPurchase   Float
  subtotal              Float

  // Relations
  purchaseBill PurchaseBill @relation(fields: [purchaseBillId], references: [id], onDelete: Cascade)
  product      Product      @relation(fields: [productId], references: [id])
  batch        ProductBatch?
}

model PurchasePayment {
  id               String   @id @default(cuid())
  purchaseBillId   String
  paymentDate      DateTime
  amountPaid       Float
  method           String   // e.g., 'CASH', 'BANK_TRANSFER'
  reference        String?
  notes            String?
  
  // Relations
  purchaseBill     PurchaseBill @relation(fields: [purchaseBillId], references: [id], onDelete: Cascade)
  
  // Auditing
  recordedByUserId String?
  createdAt        DateTime @default(now())
  
  recordedBy User? @relation("RecordedBy", fields: [recordedByUserId], references: [id])
}


// Manages sales and returns transactions.
model SaleRecord {
  id                      String    @id @default(cuid())
  recordType              String    // 'SALE', 'RETURN_TRANSACTION'
  billNumber              String    @unique
  date                    DateTime
  items                   Json      // JSON array of SaleRecordItem
  subtotalOriginal        Float
  totalItemDiscountAmount Float?
  totalCartDiscountAmount Float?
  netSubtotal             Float
  appliedDiscountSummary  Json?     // JSON array of AppliedRuleInfo
  activeDiscountSetId     String?
  taxRate                 Float
  taxAmount               Float
  totalAmount             Float
  paymentMethod           String    // 'cash', 'credit', 'REFUND'
  amountPaidByCustomer    Float?
  changeDueToCustomer     Float?
  status                  String    // 'COMPLETED_ORIGINAL', 'ADJUSTED_ACTIVE', 'RETURN_TRANSACTION_COMPLETED'
  returnedItemsLog        Json?     // JSON array of ReturnedItemDetail
  originalSaleRecordId    String?
  isCreditSale            Boolean   @default(false)
  creditOutstandingAmount Float?
  creditLastPaymentDate   DateTime?
  creditPaymentStatus     String?   // 'PENDING', 'PARTIALLY_PAID', 'FULLY_PAID'
  
  // Relations
  companyId             String
  company               CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customerId            String?
  customer              Party?         @relation(fields: [customerId], references: [id])
  paymentInstallments   PaymentInstallment[]

  // Auditing
  createdByUserId String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  createdBy User @relation("CreatedBy", fields: [createdByUserId], references: [id])

  @@index([originalSaleRecordId])
  @@index([companyId])
}

model PaymentInstallment {
  id               String   @id @default(cuid())
  saleRecordId     String
  paymentDate      DateTime
  amountPaid       Float
  method           String
  notes            String?
  
  // Relations
  saleRecord       SaleRecord @relation(fields: [saleRecordId], references: [id], onDelete: Cascade)
  
  // Auditing
  recordedByUserId String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// Manages discount campaigns and rules.
model DiscountSet {
  id                   String @id @default(cuid())
  name                 String @unique
  isActive             Boolean @default(true)
  isDefault            Boolean @default(false)
  isOneTimePerTransaction Boolean @default(false)

  // JSON fields for rules
  globalCartPriceRuleJson             Json?
  globalCartQuantityRuleJson          Json?
  defaultLineItemValueRuleJson        Json?
  defaultLineItemQuantityRuleJson     Json?
  defaultSpecificQtyThresholdRuleJson Json?
  defaultSpecificUnitPriceThresholdRuleJson Json?
  buyGetRulesJson                     Json?

  // Relations
  companyId String
  company   CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  productConfigurations ProductDiscountConfiguration[]

  // Auditing
  createdByUserId String?
  updatedByUserId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  createdBy User? @relation("CreatedBy", fields: [createdByUserId], references: [id])
  updatedBy User? @relation("UpdatedBy", fields: [updatedByUserId], references: [id])

  @@index([companyId])
}

// THIS IS THE NEWLY ADDED MODEL
model ProductDiscountConfiguration {
  id                         String @id @default(cuid())
  discountSetId              String
  productId                  String
  productNameAtConfiguration String
  isActiveForProductInCampaign Boolean @default(true)

  // JSON fields for specific rules
  lineItemValueRuleJson             Json?
  lineItemQuantityRuleJson          Json?
  specificQtyThresholdRuleJson      Json?
  specificUnitPriceThresholdRuleJson Json?

  // Relations
  companyId String
  company   CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  discountSet                DiscountSet @relation(fields: [discountSetId], references: [id], onDelete: Cascade)
  product                    Product @relation(fields: [productId], references: [id])

  @@unique([discountSetId, productId])
  @@index([companyId])
}

// Logs for manual stock adjustments.
model StockAdjustmentLog {
  id              String   @id @default(cuid())
  productId       String
  quantityChanged Float
  reason          String   // 'LOST', 'DAMAGED', 'CORRECTION_ADD', 'CORRECTION_SUBTRACT'
  notes           String?
  adjustedAt      DateTime @default(now())
  
  // Relations
  companyId String
  company   CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  product   Product        @relation(fields: [productId], references: [id])
  userId    String
  user      User           @relation(fields: [userId], references: [id])

  @@index([companyId])
}

// For income/expense tracking.
model FinancialTransaction {
  id          String   @id @default(cuid())
  date        DateTime
  type        String   // 'INCOME' or 'EXPENSE'
  amount      Float
  category    String
  description String?

  // Relations
  companyId String
  company   CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  userId    String
  user      User           @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
}

// For cash register shift management.
model CashRegisterShift {
  id             String    @id @default(cuid())
  openingBalance Float
  closingBalance Float?
  notes          String?
  startedAt      DateTime  @default(now())
  closedAt       DateTime?
  status         String    // 'OPEN', 'CLOSED'

  // Relations
  companyId String
  company   CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  userId    String
  user      User           @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
}


// General application configuration store.
model AppConfig {
  id      String @id
  value   Json
  
  updatedByUserId String?
  updatedAt       DateTime @updatedAt
  
  updatedBy User? @relation("UpdatedBy", fields: [updatedByUserId], references: [id])
}
