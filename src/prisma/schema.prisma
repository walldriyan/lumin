// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ===============================================
//           Core Business Models
// ===============================================

model Product {
  id                 String    @id @default(cuid())
  name               String    @unique
  code               String?   @unique
  category           String?
  barcode            String?   @unique
  units              Json // { baseUnit: 'pcs', derivedUnits: [{ name: 'box', conversionFactor: 12, threshold: 12 }] }
  sellingPrice       Float
  defaultQuantity    Float     @default(1)
  isActive           Boolean   @default(true)
  isService          Boolean   @default(false)
  productSpecificTaxRate Float?
  description        String?
  imageUrl           String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // Relations
  companyId                   String
  company                     CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdByUserId             String?
  updatedByUserId             String?
  batches                     ProductBatch[]
  productDiscountConfigurations ProductDiscountConfiguration[]
  stockAdjustmentLogs         StockAdjustmentLog[]
  purchaseBillItems           PurchaseBillItem[]

  @@index([companyId])
}

model ProductBatch {
  id                String    @id @default(cuid())
  productId         String
  product           Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  batchNumber       String?
  quantity          Float
  costPrice         Float
  sellingPrice      Float
  expiryDate        DateTime?
  createdAt         DateTime  @default(now())
  
  // Relation to the purchase that created this batch
  purchaseBillItemId String?   @unique
  purchaseBillItem   PurchaseBillItem? @relation(fields: [purchaseBillItemId], references: [id], onDelete: SetNull)
  
  @@index([productId])
}


model Party {
  id        String     @id @default(cuid())
  name      String
  phone     String?
  email     String?    @unique
  address   String?
  type      String // "CUSTOMER" or "SUPPLIER"
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  // Relations
  companyId                   String
  company                     CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdByUserId             String?
  updatedByUserId             String?
  salesAsCustomer             SaleRecord[]
  purchasesAsSupplier         PurchaseBill[]

  @@index([companyId, type])
}


model SaleRecord {
  id                      String    @id @default(cuid())
  recordType              String // "SALE" or "RETURN_TRANSACTION"
  billNumber              String    @unique
  date                    DateTime
  items                   Json // SaleRecordItem[]
  subtotalOriginal        Float
  totalItemDiscountAmount Float     @default(0)
  totalCartDiscountAmount Float     @default(0)
  netSubtotal             Float
  appliedDiscountSummary  Json?
  activeDiscountSetId     String?
  taxRate                 Float     @default(0)
  taxAmount               Float     @default(0)
  totalAmount             Float
  paymentMethod           String // "cash", "credit", "REFUND"
  amountPaidByCustomer    Float?
  changeDueToCustomer     Float?
  status                  String // "COMPLETED_ORIGINAL", "ADJUSTED_ACTIVE", "RETURN_TRANSACTION_COMPLETED"
  returnedItemsLog        Json? // ReturnedItemDetail[]
  originalSaleRecordId    String?
  isCreditSale            Boolean   @default(false)
  creditOutstandingAmount Float?
  creditLastPaymentDate   DateTime?
  creditPaymentStatus     String? // "PENDING", "PARTIALLY_PAID", "FULLY_PAID"
  
  // Relations
  companyId                   String
  company                     CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customerId                  String?
  customer                    Party?    @relation(fields: [customerId], references: [id], onDelete: SetNull)
  createdByUserId             String
  createdBy                   User      @relation("UserSales", fields: [createdByUserId], references: [id], onDelete: Restrict)
  paymentInstallments         PaymentInstallment[]
  
  @@index([companyId])
  @@index([customerId])
  @@index([createdByUserId])
  @@index([originalSaleRecordId])
}


model PaymentInstallment {
  id                String   @id @default(cuid())
  saleRecordId      String
  saleRecord        SaleRecord @relation(fields: [saleRecordId], references: [id], onDelete: Cascade)
  paymentDate       DateTime
  amountPaid        Float
  method            String
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  recordedByUserId  String
  recordedBy        User     @relation("UserInstallments", fields: [recordedByUserId], references: [id], onDelete: Restrict)

  @@index([saleRecordId])
  @@index([recordedByUserId])
}


model PurchaseBill {
  id                  String      @id @default(cuid())
  supplierBillNumber  String?
  purchaseDate        DateTime
  notes               String?
  totalAmount         Float
  amountPaid          Float       @default(0)
  paymentStatus       String // DRAFT, COMPLETED, PAID, PARTIALLY_PAID, CANCELLED
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  
  // Relations
  companyId                   String
  company                     CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  supplierId                  String?
  supplier                    Party?      @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  createdByUserId             String
  createdBy                   User        @relation("UserPurchases", fields: [createdByUserId], references: [id], onDelete: Restrict)
  items                       PurchaseBillItem[]
  payments                    PurchasePayment[]

  @@index([companyId])
  @@index([supplierId])
  @@index([createdByUserId])
}

model PurchaseBillItem {
  id                    String    @id @default(cuid())
  purchaseBillId        String
  purchaseBill          PurchaseBill @relation(fields: [purchaseBillId], references: [id], onDelete: Cascade)
  productId             String
  productNameAtPurchase String
  quantityPurchased     Float
  costPriceAtPurchase   Float
  subtotal              Float
  
  // Relation
  batch                 ProductBatch?

  @@index([purchaseBillId])
}

model PurchasePayment {
  id                String   @id @default(cuid())
  purchaseBillId    String
  purchaseBill      PurchaseBill @relation(fields: [purchaseBillId], references: [id], onDelete: Cascade)
  paymentDate       DateTime
  amountPaid        Float
  method            String // CASH, BANK_TRANSFER, CHEQUE, CREDIT_NOTE, OTHER
  reference         String?
  notes             String?
  createdAt         DateTime @default(now())
  
  // Relations
  recordedByUserId  String
  recordedBy        User     @relation("UserPurchasePayments", fields: [recordedByUserId], references: [id], onDelete: Restrict)
  
  @@index([purchaseBillId])
  @@index([recordedByUserId])
}

model StockAdjustmentLog {
  id              String   @id @default(cuid())
  quantityChanged Float
  reason          String // LOST, DAMAGED, CORRECTION_ADD, CORRECTION_SUBTRACT
  notes           String?
  adjustedAt      DateTime @default(now())
  
  // Relations
  companyId                   String
  company                     CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  productId         String
  product           Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Restrict)
  
  @@index([companyId])
  @@index([productId])
  @@index([userId])
}

model FinancialTransaction {
  id          String   @id @default(cuid())
  date        DateTime
  type        String // INCOME, EXPENSE
  amount      Float
  category    String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  companyId                   String
  company                     CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Restrict)
  
  @@index([companyId])
  @@index([userId])
}


// ===============================================
//          Settings & Access Control
// ===============================================

model User {
  id                      String    @id @default(cuid())
  username                String    @unique
  email                   String?   @unique
  passwordHash            String
  isActive                Boolean   @default(true)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  
  // Relations
  companyId               String?
  company                 CompanyProfile?      @relation(fields: [companyId], references: [id], onDelete: SetNull)
  roleId                  String
  role                    Role                 @relation(fields: [roleId], references: [id], onDelete: Restrict)
  createdByUserId         String?
  updatedByUserId         String?
  sales                   SaleRecord[]         @relation("UserSales")
  installmentsRecorded    PaymentInstallment[] @relation("UserInstallments")
  purchases               PurchaseBill[]       @relation("UserPurchases")
  purchasePayments        PurchasePayment[]    @relation("UserPurchasePayments")
  stockAdjustments        StockAdjustmentLog[]
  financialTransactions   FinancialTransaction[]
  shifts                  CashRegisterShift[]
  
  @@index([companyId])
  @@index([roleId])
}


model Role {
  id              String    @id @default(cuid())
  name            String    @unique
  description     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  createdByUserId String?
  updatedByUserId String?
  users           User[]
  permissions     RolePermission[]
}


model Permission {
  id          String    @id @default(cuid())
  action      String // e.g., 'create', 'read', 'update', 'delete', 'manage'
  subject     String // e.g., 'Product', 'Sale', 'all'
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  roles       RolePermission[]

  @@unique([action, subject])
}


model RolePermission {
  roleId       String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}


model DiscountSet {
  id                      String    @id @default(cuid())
  name                    String    @unique
  isActive                Boolean   @default(true)
  isDefault               Boolean   @default(false)
  isOneTimePerTransaction Boolean   @default(false)
  // JSON rule fields
  globalCartPriceRuleJson         Json?
  globalCartQuantityRuleJson      Json?
  defaultLineItemValueRuleJson    Json?
  defaultLineItemQuantityRuleJson Json?
  defaultSpecificQtyThresholdRuleJson Json?
  defaultSpecificUnitPriceThresholdRuleJson Json?
  buyGetRulesJson                 Json? // Array of BuyGetRule
  
  // Relations
  companyId                   String
  company                     CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdByUserId             String?
  updatedByUserId             String?
  productConfigurations       ProductDiscountConfiguration[]

  @@index([companyId])
}

// THIS IS THE NEWLY ADDED MODEL
model ProductDiscountConfiguration {
  id                            String    @id @default(cuid())
  productNameAtConfiguration    String
  isActiveForProductInCampaign  Boolean   @default(true)
  
  // Rule JSONs
  lineItemValueRuleJson         Json?
  lineItemQuantityRuleJson      Json?
  specificQtyThresholdRuleJson  Json?
  specificUnitPriceThresholdRuleJson Json?
  
  // Relations
  companyId                   String
  company                     CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  discountSetId               String
  discountSet                 DiscountSet @relation(fields: [discountSetId], references: [id], onDelete: Cascade)
  productId                   String
  product                     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([discountSetId, productId])
  @@index([companyId])
}


model CashRegisterShift {
  id              String    @id @default(cuid())
  openingBalance  Float
  closingBalance  Float?
  notes           String?
  startedAt       DateTime  @default(now())
  closedAt        DateTime?
  status          String // OPEN, CLOSED
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  companyId                   String
  company                     CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  userId            String
  user              User      @relation(fields: [userId], references: [id], onDelete: Restrict)
  
  @@index([companyId])
  @@index([userId])
}


model CompanyProfile {
  id          String   @id @default(cuid())
  name        String   @unique
  address     String?
  phone       String?
  email       String?
  website     String?
  taxId       String?
  logoUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  createdByUserId             String?
  updatedByUserId             String?
  users                       User[]
  products                    Product[]
  parties                     Party[]
  sales                       SaleRecord[]
  purchases                   PurchaseBill[]
  stockAdjustmentLogs         StockAdjustmentLog[]
  financialTransactions       FinancialTransaction[]
  discountSets                DiscountSet[]
  productDiscountConfigurations ProductDiscountConfiguration[]
  cashRegisterShifts          CashRegisterShift[]
}

model AppConfig {
  id              String   @id // e.g., "taxRate", "invoiceSettings"
  value           Json
  updatedByUserId String?
  updatedAt       DateTime @updatedAt
}
