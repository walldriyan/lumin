// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}


// ==============================================================================
// 1. AUTHENTICATION & AUTHORIZATION MODELS
// ==============================================================================

model User {
  id              String       @id @default(cuid())
  username        String       @unique
  email           String?      @unique
  passwordHash    String
  isActive        Boolean      @default(true)
  
  roleId          String
  role            Role         @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  companyId       String? // A user can exist without a company initially (e.g., SuperAdmin)
  company         CompanyProfile? @relation(fields: [companyId], references: [id], onDelete: SetNull)

  shifts          CashRegisterShift[]
  financialTransactions FinancialTransaction[]
  stockAdjustments StockAdjustmentLog[]
  
  // Auditing: Who created/updated this user?
  createdBy       User?        @relation("UserCreatedBy", fields: [createdByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdByUserId String?
  updatedBy       User?        @relation("UserUpdatedBy", fields: [updatedByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUserId String?
  
  createdUsers    User[]       @relation("UserCreatedBy")
  updatedUsers    User[]       @relation("UserUpdatedBy")

  createdRoles    Role[]       @relation("RoleCreatedBy")
  updatedRoles    Role[]       @relation("RoleUpdatedBy")

  createdParties  Party[]      @relation("PartyCreatedBy")
  updatedParties  Party[]      @relation("PartyUpdatedBy")

  createdProducts Product[]    @relation("ProductCreatedBy")
  updatedProducts Product[]    @relation("ProductUpdatedBy")

  createdSales    SaleRecord[] @relation("SaleCreatedBy")

  createdPurchases PurchaseBill[] @relation("PurchaseCreatedBy")
  recordedPurchasePayments PurchasePayment[] @relation("PurchasePaymentRecordedBy")

  createdDiscountSets DiscountSet[] @relation("DiscountSetCreatedBy")
  updatedDiscountSets DiscountSet[] @relation("DiscountSetUpdatedBy")

  createdCompanyProfiles CompanyProfile[] @relation("CompanyProfileCreatedBy")
  updatedCompanyProfiles CompanyProfile[] @relation("CompanyProfileUpdatedBy")

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Role {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  permissions     RolePermission[]
  users           User[]
  
  // Auditing
  createdBy       User?            @relation("RoleCreatedBy", fields: [createdByUserId], references: [id], onDelete: SetNull)
  createdByUserId String?
  updatedBy       User?            @relation("RoleUpdatedBy", fields: [updatedByUserId], references: [id], onDelete: SetNull)
  updatedByUserId String?

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Permission {
  id              String           @id @default(cuid())
  action          String           // e.g., 'create', 'read', 'update', 'delete', 'manage'
  subject         String           // e.g., 'Product', 'User', 'all'
  description     String?
  roles           RolePermission[]

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@unique([action, subject])
}

model RolePermission {
  roleId          String
  permissionId    String
  role            Role         @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission      Permission   @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@id([roleId, permissionId])
}


// ==============================================================================
// 2. COMPANY PROFILE
// ==============================================================================
model CompanyProfile {
  id              String        @id @default(cuid())
  name            String
  address         String?
  phone           String?
  email           String?
  website         String?
  taxId           String?
  logoUrl         String?
  
  users           User[]

  // All company-scoped data
  parties         Party[]
  products        Product[]
  saleRecords     SaleRecord[]
  purchaseBills   PurchaseBill[]
  discountSets    DiscountSet[]
  shifts          CashRegisterShift[]
  financialTransactions FinancialTransaction[]
  stockAdjustments StockAdjustmentLog[]

  // Auditing
  createdBy       User?         @relation("CompanyProfileCreatedBy", fields: [createdByUserId], references: [id], onDelete: SetNull)
  createdByUserId String?
  updatedBy       User?         @relation("CompanyProfileUpdatedBy", fields: [updatedByUserId], references: [id], onDelete: SetNull)
  updatedByUserId String?

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// ==============================================================================
// 3. CORE BUSINESS MODELS
// ==============================================================================

model Party {
  id              String       @id @default(cuid())
  name            String
  phone           String?
  email           String?      @unique
  address         String?
  type            String       // "CUSTOMER" or "SUPPLIER"
  isActive        Boolean      @default(true)

  companyId       String
  company         CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  sales           SaleRecord[]
  purchases       PurchaseBill[]

  // Auditing
  createdBy       User?        @relation("PartyCreatedBy", fields: [createdByUserId], references: [id], onDelete: SetNull)
  createdByUserId String?
  updatedBy       User?        @relation("PartyUpdatedBy", fields: [updatedByUserId], references: [id], onDelete: SetNull)
  updatedByUserId String?
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([name, companyId])
}

model Product {
  id              String       @id @default(cuid())
  name            String       
  code            String?      @unique
  category        String?
  barcode         String?
  units           Json         // { "baseUnit": "pcs", "derivedUnits": [{"name": "box", "conversion": 12, "displayThreshold": 12}] }
  sellingPrice    Float
  defaultQuantity Float        @default(1)
  isActive        Boolean      @default(true)
  isService       Boolean      @default(false)
  productSpecificTaxRate Float? // Stored as a percentage value, e.g., 15 for 15%
  description     String?
  imageUrl        String?

  companyId       String
  company         CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  batches         ProductBatch[]
  stockAdjustmentLogs StockAdjustmentLog[]
  productDiscountConfigurations ProductDiscountConfiguration[]

  // Auditing
  createdBy       User?        @relation("ProductCreatedBy", fields: [createdByUserId], references: [id], onDelete: SetNull)
  createdByUserId String?
  updatedBy       User?        @relation("ProductUpdatedBy", fields: [updatedByUserId], references: [id], onDelete: SetNull)
  updatedByUserId String?

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([name, companyId])
}

model SaleRecord {
  id              String       @id @default(cuid())
  recordType      String       // "SALE", "RETURN_TRANSACTION"
  billNumber      String       @unique
  date            DateTime
  
  companyId       String
  company         CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)

  customerId      String?
  customer        Party?       @relation(fields: [customerId], references: [id], onDelete: SetNull)
  
  items           Json         // SaleRecordItem[]
  subtotalOriginal Float
  totalItemDiscountAmount Float?
  totalCartDiscountAmount Float?
  netSubtotal     Float?
  appliedDiscountSummary Json?
  activeDiscountSetId String?

  taxRate         Float        // The tax rate used for calculation (e.g., 0.15 for 15%)
  taxAmount       Float
  totalAmount     Float

  paymentMethod   String       // "cash", "credit", "REFUND"
  amountPaidByCustomer Float?
  changeDueToCustomer Float?

  status          String       // "COMPLETED_ORIGINAL", "ADJUSTED_ACTIVE", "RETURN_TRANSACTION_COMPLETED"
  returnedItemsLog Json?       // ReturnedItemDetail[]
  originalSaleRecordId String?

  isCreditSale    Boolean      @default(false)
  creditOutstandingAmount Float?
  creditLastPaymentDate DateTime?
  creditPaymentStatus String?   // "PENDING", "PARTIALLY_PAID", "FULLY_PAID"
  paymentInstallments PaymentInstallment[]

  createdByUserId String
  createdBy       User         @relation("SaleCreatedBy", fields: [createdByUserId], references: [id], onDelete: Restrict)
  
  createdAt       DateTime     @default(now())
}

model PurchaseBill {
  id              String       @id @default(cuid())
  
  companyId       String
  company         CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  supplierId      String
  supplier        Party        @relation(fields: [supplierId], references: [id], onDelete: Restrict)
  
  supplierBillNumber String?
  purchaseDate    DateTime
  
  items           PurchaseBillItem[]
  
  notes           String?
  totalAmount     Float
  amountPaid      Float        @default(0)
  paymentStatus   String       // "DRAFT", "COMPLETED", "PAID", "PARTIALLY_PAID", "CANCELLED"
  
  payments        PurchasePayment[]

  createdByUserId String
  createdBy       User         @relation("PurchaseCreatedBy", fields: [createdByUserId], references: [id], onDelete: Restrict)

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model DiscountSet {
  id              String       @id @default(cuid())
  name            String
  isActive        Boolean      @default(true)
  isDefault       Boolean      @default(false)
  isOneTimePerTransaction Boolean @default(false)
  
  companyId       String
  company         CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)

  globalCartPriceRuleJson Json?
  globalCartQuantityRuleJson Json?
  defaultLineItemValueRuleJson Json?
  defaultLineItemQuantityRuleJson Json?
  defaultSpecificQtyThresholdRuleJson Json?
  defaultSpecificUnitPriceThresholdRuleJson Json?
  buyGetRulesJson Json? // Array of BuyGetRule

  productConfigurations ProductDiscountConfiguration[]

  // Auditing
  createdBy       User?        @relation("DiscountSetCreatedBy", fields: [createdByUserId], references: [id], onDelete: SetNull)
  createdByUserId String?
  updatedBy       User?        @relation("DiscountSetUpdatedBy", fields: [updatedByUserId], references: [id], onDelete: SetNull)
  updatedByUserId String?

  @@unique([name, companyId])
}

// ==============================================================================
// 4. TRANSACTIONAL & LOGGING MODELS
// ==============================================================================

model ProductBatch {
  id              String       @id @default(cuid())
  productId       String
  product         Product      @relation(fields: [productId], references: [id], onDelete: Cascade)

  purchaseBillItemId String?      @unique // A batch can only come from one purchase item
  purchaseBillItem PurchaseBillItem? @relation(fields: [purchaseBillItemId], references: [id], onDelete: SetNull)
  
  batchNumber     String?
  quantity        Float
  costPrice       Float
  sellingPrice    Float        // The selling price for items from this specific batch
  expiryDate      DateTime?
  
  createdAt       DateTime     @default(now())
}

model PurchaseBillItem {
  id              String       @id @default(cuid())
  purchaseBillId  String
  purchaseBill    PurchaseBill @relation(fields: [purchaseBillId], references: [id], onDelete: Cascade)
  
  productId       String
  // This relation is commented out because a product can be deleted, but we want to keep the purchase history
  // product         Product      @relation(fields: [productId], references: [id])
  
  productNameAtPurchase String
  quantityPurchased Float
  costPriceAtPurchase Float
  subtotal        Float

  batch           ProductBatch? // Link back to the batch it created
}

model PurchasePayment {
  id              String @id @default(cuid())
  purchaseBillId  String
  purchaseBill    PurchaseBill @relation(fields: [purchaseBillId], references: [id], onDelete: Cascade)
  
  paymentDate     DateTime
  amountPaid      Float
  method          String
  reference       String?
  notes           String?
  
  recordedByUserId String
  recordedBy      User @relation("PurchasePaymentRecordedBy", fields: [recordedByUserId], references: [id], onDelete: Restrict)
  
  createdAt       DateTime @default(now())
}

model PaymentInstallment {
  id              String       @id @default(cuid())
  saleRecordId    String
  saleRecord      SaleRecord   @relation(fields: [saleRecordId], references: [id], onDelete: Cascade)
  
  paymentDate     DateTime
  amountPaid      Float
  method          String
  notes           String?
  
  recordedByUserId String
  // This relation is commented out because a user might be deleted, but we want to keep the payment history
  // recordedBy      User @relation(fields: [recordedByUserId], references: [id])
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model StockAdjustmentLog {
  id              String       @id @default(cuid())
  productId       String
  product         Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  companyId       String
  company         CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)

  quantityChanged Float
  reason          String       // "LOST", "DAMAGED", "CORRECTION_ADD", "CORRECTION_SUBTRACT"
  notes           String?
  
  adjustedAt      DateTime     @default(now())
  
  userId          String
  user            User         @relation(fields: [userId], references: [id], onDelete: Restrict)
}

model FinancialTransaction {
  id              String       @id @default(cuid())
  date            DateTime
  type            String       // "INCOME" or "EXPENSE"
  amount          Float
  category        String
  description     String?

  companyId       String
  company         CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)

  userId          String
  user            User         @relation(fields: [userId], references: [id], onDelete: Restrict)
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model CashRegisterShift {
  id              String       @id @default(cuid())
  openingBalance  Float
  closingBalance  Float?
  notes           String?
  startedAt       DateTime     @default(now())
  closedAt        DateTime?
  status          String       // "OPEN", "CLOSED"

  companyId       String
  company         CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  userId          String
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

// ==============================================================================
// 5. APPLICATION CONFIGURATION
// ==============================================================================
model AppConfig {
  id              String       @id
  value           Json
  
  updatedByUserId String?
  updatedAt       DateTime     @updatedAt
}
