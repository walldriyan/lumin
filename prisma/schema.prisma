// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// -------------------------------------
// Core Models
// -------------------------------------

model CompanyProfile {
  id              String  @id @default(cuid())
  name            String
  address         String?
  phone           String?
  email           String?
  website         String?
  taxId           String?
  logoUrl         String?

  users           User[]
  products        Product[]
  parties         Party[]
  saleRecords     SaleRecord[]
  purchaseBills   PurchaseBill[]
  discountSets    DiscountSet[]
  stockAdjustmentLogs StockAdjustmentLog[]
  financialTransactions FinancialTransaction[]
  cashRegisterShifts  CashRegisterShift[]
  productDiscountConfigurations ProductDiscountConfiguration[]

  createdByUserId String?
  updatedByUserId String?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String?   @unique
  passwordHash  String
  isActive      Boolean   @default(true)
  
  companyId     String?
  company       CompanyProfile? @relation(fields: [companyId], references: [id])

  roleId        String
  role          Role      @relation(fields: [roleId], references: [id])

  createdSales      SaleRecord[] @relation("CreatedSales")
  createdPurchaseBills PurchaseBill[] @relation("CreatedPurchaseBills")
  recordedPayments  PurchasePayment[] @relation("RecordedPayments")
  createdParties    Party[] @relation("CreatedParties")
  updatedParties    Party[] @relation("UpdatedParties")
  createdProducts   Product[] @relation("CreatedProducts")
  updatedProducts   Product[] @relation("UpdatedProducts")
  stockAdjustments  StockAdjustmentLog[]
  financialTransactions FinancialTransaction[]
  cashRegisterShifts  CashRegisterShift[]

  createdRoles      Role[] @relation("CreatedRoles")
  updatedRoles      Role[] @relation("UpdatedRoles")
  createdUsers      User[] @relation("CreatedUsers")
  updatedUsers      User[] @relation("UpdatedUsers")
  
  createdByUserId   String?
  updatedByUserId   String?
  createdByUser     User? @relation("CreatedUsers", fields: [createdByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUser     User? @relation("UpdatedUsers", fields: [updatedByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Role {
  id              String    @id @default(cuid())
  name            String    @unique
  description     String?
  users           User[]
  permissions     RolePermission[]
  
  createdByUserId String?
  updatedByUserId String?
  createdByUser   User?     @relation("CreatedRoles", fields: [createdByUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedByUser   User?     @relation("UpdatedRoles", fields: [updatedByUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Permission {
  id          String    @id @default(cuid())
  action      String
  subject     String
  description String?
  roles       RolePermission[]

  @@unique([action, subject])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model RolePermission {
  roleId        String
  permissionId  String
  role          Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission    Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

// -------------------------------------
// Business Logic Models
// -------------------------------------

model Party {
  id            String    @id @default(cuid())
  name          String
  phone         String?
  email         String?   @unique
  address       String?
  type          String    // "CUSTOMER" or "SUPPLIER"
  isActive      Boolean   @default(true)

  companyId     String
  company       CompanyProfile @relation(fields: [companyId], references: [id])

  sales         SaleRecord[]
  purchases     PurchaseBill[]

  createdByUserId String?
  updatedByUserId String?
  createdByUser User?     @relation("CreatedParties", fields: [createdByUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedByUser User?     @relation("UpdatedParties", fields: [updatedByUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Product {
  id            String    @id @default(cuid())
  name          String    @unique
  code          String?   @unique
  category      String?
  barcode       String?   @unique
  units         Json      // { baseUnit: 'pcs', derivedUnits: [{ name: 'box', conversionFactor: 12, threshold: 12 }] }
  sellingPrice  Float
  defaultQuantity Float     @default(1)
  isActive      Boolean   @default(true)
  isService     Boolean   @default(false)
  productSpecificTaxRate Float?
  description   String?
  imageUrl      String?

  companyId     String
  company       CompanyProfile @relation(fields: [companyId], references: [id])

  batches       ProductBatch[]
  purchaseBillItems PurchaseBillItem[]
  saleRecordItems   Json // Handled in SaleRecord
  
  stockAdjustmentLogs StockAdjustmentLog[]
  productDiscountConfigurations ProductDiscountConfiguration[]

  createdByUserId String?
  updatedByUserId String?
  createdByUser User?     @relation("CreatedProducts", fields: [createdByUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedByUser User?     @relation("UpdatedProducts", fields: [updatedByUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model ProductBatch {
  id                String    @id @default(cuid())
  productId         String
  product           Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  batchNumber       String?
  quantity          Float
  costPrice         Float
  sellingPrice      Float
  expiryDate        DateTime?

  purchaseBillItemId String? @unique
  purchaseBillItem   PurchaseBillItem? @relation(fields: [purchaseBillItemId], references: [id], onDelete: SetNull)

  createdAt         DateTime  @default(now())
}

model DiscountSet {
  id                  String    @id @default(cuid())
  name                String    @unique
  isActive            Boolean   @default(true)
  isDefault           Boolean   @default(false)
  isOneTimePerTransaction Boolean @default(false)

  globalCartPriceRuleJson Json?
  globalCartQuantityRuleJson Json?
  defaultLineItemValueRuleJson Json?
  defaultLineItemQuantityRuleJson Json?
  defaultSpecificQtyThresholdRuleJson Json?
  defaultSpecificUnitPriceThresholdRuleJson Json?
  buyGetRulesJson     Json?

  companyId           String
  company             CompanyProfile @relation(fields: [companyId], references: [id])

  productConfigurations ProductDiscountConfiguration[]
  activeSaleRecords   SaleRecord[]

  createdByUserId     String?
  updatedByUserId     String?
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model ProductDiscountConfiguration {
  id                      String    @id @default(cuid())
  discountSetId           String
  discountSet             DiscountSet @relation(fields: [discountSetId], references: [id], onDelete: Cascade)
  
  productId               String
  product                 Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productNameAtConfiguration String
  isActiveForProductInCampaign Boolean @default(true)

  lineItemValueRuleJson   Json?
  lineItemQuantityRuleJson Json?
  specificQtyThresholdRuleJson Json?
  specificUnitPriceThresholdRuleJson Json?

  companyId           String
  company             CompanyProfile @relation(fields: [companyId], references: [id])

  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}


// -------------------------------------
// Transactional Models
// -------------------------------------

model SaleRecord {
  id            String    @id @default(cuid())
  recordType    String    // "SALE", "RETURN_TRANSACTION"
  billNumber    String    @unique
  date          DateTime
  
  items         Json      // SaleRecordItem[]
  subtotalOriginal Float
  totalItemDiscountAmount Float
  totalCartDiscountAmount Float
  netSubtotal   Float
  appliedDiscountSummary Json?
  taxRate       Float
  taxAmount     Float
  totalAmount   Float
  paymentMethod String    // "cash", "credit", "REFUND"
  amountPaidByCustomer Float?
  changeDueToCustomer Float?
  status        String    // "COMPLETED_ORIGINAL", "ADJUSTED_ACTIVE", "RETURN_TRANSACTION_COMPLETED"
  
  returnedItemsLog Json?  // ReturnedItemDetail[]
  originalSaleRecordId String?

  isCreditSale    Boolean @default(false)
  creditOutstandingAmount Float?
  creditLastPaymentDate DateTime?
  creditPaymentStatus String? // "PENDING", "PARTIALLY_PAID", "FULLY_PAID"
  
  paymentInstallments PaymentInstallment[]

  companyId     String
  company       CompanyProfile @relation(fields: [companyId], references: [id])
  
  customerId    String?
  customer      Party?    @relation(fields: [customerId], references: [id], onDelete: SetNull)

  activeDiscountSetId String?
  activeDiscountSet   DiscountSet? @relation(fields: [activeDiscountSetId], references: [id], onDelete: SetNull)
  
  createdByUserId String
  createdBy     User      @relation("CreatedSales", fields: [createdByUserId], references: [id], onDelete: Restrict)
  
  createdAt     DateTime  @default(now())
}

model PaymentInstallment {
  id              String    @id @default(cuid())
  saleRecordId    String
  saleRecord      SaleRecord @relation(fields: [saleRecordId], references: [id], onDelete: Cascade)
  
  paymentDate     DateTime
  amountPaid      Float
  method          String
  notes           String?
  
  recordedByUserId String
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}


model PurchaseBill {
  id                  String    @id @default(cuid())
  supplierId          String
  supplier            Party     @relation(fields: [supplierId], references: [id], onDelete: Restrict)
  
  supplierBillNumber  String?
  purchaseDate        DateTime
  notes               String?
  totalAmount         Float
  amountPaid          Float     @default(0)
  paymentStatus       String    // "DRAFT", "COMPLETED", "PAID", "PARTIALLY_PAID", "CANCELLED"
  
  items               PurchaseBillItem[]
  payments            PurchasePayment[]

  companyId           String
  company             CompanyProfile @relation(fields: [companyId], references: [id])
  
  createdByUserId     String
  createdBy           User      @relation("CreatedPurchaseBills", fields: [createdByUserId], references: [id], onDelete: Restrict)
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model PurchaseBillItem {
  id                  String    @id @default(cuid())
  purchaseBillId      String
  purchaseBill        PurchaseBill @relation(fields: [purchaseBillId], references: [id], onDelete: Cascade)
  
  productId           String
  product             Product   @relation(fields: [productId], references: [id], onDelete: Restrict)
  productNameAtPurchase String
  
  quantityPurchased   Float
  costPriceAtPurchase Float
  subtotal            Float

  batch               ProductBatch?
}

model PurchasePayment {
  id                String    @id @default(cuid())
  purchaseBillId    String
  purchaseBill      PurchaseBill @relation(fields: [purchaseBillId], references: [id], onDelete: Cascade)
  
  paymentDate       DateTime
  amountPaid        Float
  method            String    // "CASH", "BANK_TRANSFER", "CHEQUE", etc.
  reference         String?
  notes             String?
  
  recordedByUserId  String
  recordedByUser    User      @relation("RecordedPayments", fields: [recordedByUserId], references: [id], onDelete: Restrict)
  
  createdAt         DateTime  @default(now())
}


// -------------------------------------
// Utility & Log Models
// -------------------------------------

model StockAdjustmentLog {
  id              String    @id @default(cuid())
  productId       String
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  quantityChanged Float
  reason          String    // "LOST", "DAMAGED", "CORRECTION_ADD", "CORRECTION_SUBTRACT"
  notes           String?
  
  adjustedAt      DateTime  @default(now())

  companyId       String
  company         CompanyProfile @relation(fields: [companyId], references: [id])
  
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Restrict)
}


model FinancialTransaction {
  id            String    @id @default(cuid())
  date          DateTime
  type          String    // "INCOME" or "EXPENSE"
  amount        Float
  category      String
  description   String?

  companyId     String
  company       CompanyProfile @relation(fields: [companyId], references: [id])
  
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Restrict)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model CashRegisterShift {
  id              String    @id @default(cuid())
  openingBalance  Float
  closingBalance  Float?
  notes           String?
  
  startedAt       DateTime  @default(now())
  closedAt        DateTime?
  status          String    // "OPEN", "CLOSED"

  companyId       String
  company         CompanyProfile @relation(fields: [companyId], references: [id])

  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model AppConfig {
  id              String    @id
  value           Json
  
  updatedByUserId String?
  updatedAt       DateTime  @updatedAt
}
